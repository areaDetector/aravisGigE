# Database for the records specific to the aravis GigE driver
# Mark Rivers
# March 23, 2008

# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout
#% macro, ADDR, Asyn Port address
#% macro, UPDATE, Update rate
# % gui, $(PORT), edmtab, aravisCamera.edl, P=$(P),R=$(R)

# All tags starting with gdatag are DLS specific for GDA
# % gdatag, template, aravisCamera, $(PORT)_aravisCamera, $(PORT) aravisCamera class instance

# % gdatag, pv, ro, $(PORT)_aravisCamera, COMPLETED_RBV, Readback for Frames Completed
record(ai, "$(P)$(R)COMPLETED_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, FAILURES_RBV, Readback for Frame Failures
record(ai, "$(P)$(R)FAILURES_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, UNDERRUNS_RBV, Readback for Frame Underruns
record(ai, "$(P)$(R)UNDERRUNS_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)UPDATE")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARAVIS_UPDATE")
   field(SCAN, "$(UPDATE=5 second)")
}

record(longout, "$(P)$(R)RESET")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARAVIS_RESET")
}
