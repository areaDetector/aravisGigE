--- vendor/aravis/src/arvgvinterface.c	2014-09-05 10:18:53.832678198 +0100
+++ vendor/aravis/src/arvgvinterface.c.new	2014-09-05 10:18:40.859432533 +0100
@@ -25,6 +25,7 @@
  * @short_description: Gigabit ethernet camera interface
  */
 
+#include <arpa/inet.h>
 #include <arvgvinterface.h>
 #include <arvgvdevice.h>
 #include <arvgvcp.h>
@@ -36,10 +37,12 @@
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <net/if.h>
+#include <netdb.h>
 #include <ifaddrs.h>
 #include <stdlib.h>
 #include <string.h>
 
+
 /* ArvGvDiscoverSocket implementation */
 
 typedef struct {
@@ -398,6 +401,75 @@
 	}
 }
 
+static GInetAddress * arv_gv_interface_camera_locate(ArvGvInterface *gv_interface, GInetAddress *device_address) {
+	ArvGvDiscoverSocketList *socket_list;
+	ArvGvcpPacket *packet;
+	GInetAddress *interface_address = NULL;
+	char buffer[ARV_GV_INTERFACE_SOCKET_BUFFER_SIZE];
+	GSList *iter;
+	size_t size;
+	int i, count;
+
+	socket_list = arv_gv_discover_socket_list_new ();
+
+	if (socket_list->n_sockets < 1) {
+		arv_gv_discover_socket_list_free (socket_list);
+		return interface_address;
+	}
+
+	/* Just read a random register from the camera socket */
+	packet = arv_gvcp_packet_new_read_register_cmd(ARV_GVBS_N_STREAM_CHANNELS_OFFSET, 0, &size);
+	GSocketAddress *device_socket_address = g_inet_socket_address_new(device_address, ARV_GVCP_PORT);
+
+	for (iter = socket_list->sockets; iter != NULL; iter = iter->next) {
+		ArvGvDiscoverSocket *socket = iter->data;
+		GError *error = NULL;
+		g_socket_send_to (socket->socket,
+				  device_socket_address,
+				  (const char *) packet, size,
+				  NULL, &error);
+		if (error != NULL) {
+			arv_warning_interface ("[ArvGVInterface::arv_gv_interface_camera_locate] Error: %s", error->message);
+			g_error_free (error);
+		}
+	}
+
+	arv_gvcp_packet_free (packet);
+
+	do {
+		/* Now parse the result */
+		if (g_poll (socket_list->poll_fds, socket_list->n_sockets, ARV_GV_INTERFACE_DISCOVERY_TIMEOUT_MS) == 0) {
+			arv_gv_discover_socket_list_free (socket_list);
+			return interface_address;
+		}
+
+		for (i = 0, iter = socket_list->sockets; iter != NULL; i++, iter = iter->next) {
+			ArvGvDiscoverSocket *socket = iter->data;
+
+			do {
+				g_socket_set_blocking (socket->socket, FALSE);
+				count = g_socket_receive (socket->socket, buffer, ARV_GV_INTERFACE_SOCKET_BUFFER_SIZE,
+							  NULL, NULL);
+				g_socket_set_blocking (socket->socket, TRUE);
+
+				if (count > 0) {
+					ArvGvcpPacket *packet = (ArvGvcpPacket *) buffer;
+					if (g_ntohs (packet->header.command) == ARV_GVCP_COMMAND_READ_REGISTER_CMD ||
+					    g_ntohs (packet->header.command) == ARV_GVCP_COMMAND_READ_REGISTER_ACK) {
+						interface_address = g_inet_socket_address_get_address(G_INET_SOCKET_ADDRESS (socket->interface_address));
+						g_object_ref(interface_address);
+						arv_gv_discover_socket_list_free (socket_list);
+						return interface_address;
+					}
+				}
+			} while (count > 0);
+		}
+	} while (1);
+	arv_gv_discover_socket_list_free (socket_list);
+	return interface_address;
+}
+
+
 static ArvDevice *
 _open_device (ArvInterface *interface, const char *device_id)
 {
@@ -417,8 +489,44 @@
 	} else
 		device_infos = g_hash_table_lookup (gv_interface->priv->devices, device_id);
 
-	if (device_infos == NULL)
-		return NULL;
+    if (device_infos == NULL) {
+        // Try if this is a hostname/IP address
+        struct addrinfo hints;
+        struct addrinfo *servinfo, *endpoint;
+        memset(&hints, 0, sizeof(hints));
+        hints.ai_family = AF_INET;
+        hints.ai_socktype = SOCK_STREAM;
+
+        if (getaddrinfo(device_id, "http", &hints, &servinfo) != 0) {
+
+            return NULL;
+        }
+
+        for (endpoint=servinfo; endpoint!=NULL; endpoint=endpoint->ai_next) {
+            char ipstr[INET_ADDRSTRLEN];
+            struct sockaddr_in *ip = (struct sockaddr_in *)endpoint->ai_addr;
+
+            inet_ntop(endpoint->ai_family, &ip->sin_addr, ipstr, sizeof(ipstr));
+
+            device_address = g_inet_address_new_from_string(ipstr);
+            if (device_address != NULL) {
+                /* Try and find an interface that the camera will respond on */
+                GInetAddress *interface_address = 
+                    arv_gv_interface_camera_locate(gv_interface, device_address);
+                if (interface_address != NULL) {
+                    device = arv_gv_device_new (interface_address, device_address);
+                    g_object_unref (interface_address);
+                }
+            }
+            g_object_unref (device_address);
+            if (device != NULL) {
+                break;
+            }
+        }
+        freeaddrinfo(servinfo);
+        return device;
+    }
+
 
 	device_address = _device_infos_to_ginetaddress (device_infos);
 	device = arv_gv_device_new (device_infos->interface_address, device_address);
Index: vendor/aravis/src/arvstream.h
===================================================================
--- vendor/aravis/src/arvstream.h	(revision 119487)
+++ vendor/aravis/src/arvstream.h	(working copy)
@@ -89,6 +89,8 @@
 void 		arv_stream_set_emit_signals 		(ArvStream *stream, gboolean emit_signals);
 gboolean 	arv_stream_get_emit_signals 		(ArvStream *stream);
 
+ArvBuffer * arv_stream_pop_input_buffer (ArvStream *stream);
+
 G_END_DECLS
 
 #endif


diff --git a/vendor/aravis/src/arvrealtime.c b/vendor/aravis/src/arvrealtime.c
index 94e24e7..ce14e7c 100644
--- vendor/aravis/src/arvrealtime.c
+++ vendor/aravis/src/arvrealtime.c
@@ -27,6 +27,7 @@
 
 ***/
 
+#include <sched.h>
 #include <arvrealtimeprivate.h>
 #include <arvdebug.h>
 #include <memory.h>
diff --git a/vendor/aravis/tests/realtimetest.c b/vendor/aravis/tests/realtimetest.c
index 73ccb64..a766821 100644
--- vendor/aravis/tests/realtimetest.c
+++ vendor/aravis/tests/realtimetest.c
@@ -26,6 +26,7 @@
 
 #include <../src/arvrealtimeprivate.h>
 
+#include <sched.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>

